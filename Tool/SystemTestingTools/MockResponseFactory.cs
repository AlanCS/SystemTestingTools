using System;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Text.RegularExpressions;
using System.Linq;
using System.Collections.Generic;

namespace SystemTestingTools
{
    /// <summary>
    /// Contains methods to create easily create HttpResponseMessage
    /// </summary>
    public static class ResponseFactory
    {
        // part 1 = first line starting with HTTP/, ie HTTP/1.1 424 Failed Dependency
        // part 2 = headers (if any)
        // part 3 = double new lines
        // part 4 = body
        private static Regex FiddlerFilePartsRegex = new Regex(@"HTTP/[^\n]+?([0-9]{3}).+?\n(.*?)(\r\r|\n\n|\r\n\r\n)(.*)", RegexOptions.Compiled | RegexOptions.Singleline);

        private static Regex CommentsRegex = new Regex(@"(.+?)\n--\!\?@Divider\:.+?\n(.+)", RegexOptions.Compiled | RegexOptions.Singleline);

        private static Regex HeaderParser = new Regex(@"(.+?):(.+?)$", RegexOptions.Compiled | RegexOptions.Multiline);

        /// <summary>
        /// Read a file with the format like
        /// HTTP/1.1 200 OK
        /// Header1: some value
        /// Header2: some other value
        /// 
        /// {"Message":"some json content"}
        /// 
        /// Or the format generated by the recorder function
        /// </summary>
        /// <param name="fileFullPath"></param>
        /// <returns></returns>
        public static HttpResponseMessage FromFiddlerLikeResponseFile(string fileFullPath)
        {
            string content = ReadFile(fileFullPath);

            if(CommentsRegex.IsMatch(content))
                content = CommentsRegex.Match(content).Groups[2].Value.Trim();

            var fileParts = FiddlerFilePartsRegex.Match(content);

            if (!fileParts.Success) throw new ArgumentException($"File is not in the right format, please consult {Constants.Website}");

            var httpStatusCode = Convert.ToInt32(fileParts.Groups[1].Value);

            if (!Enum.IsDefined(typeof(HttpStatusCode), httpStatusCode))
                throw new ArgumentException($"Not a valid Http Status code: {httpStatusCode}");

            var httpStatus = (HttpStatusCode)httpStatusCode;
            var response = new HttpResponseMessage(httpStatus);

            var headerContent = fileParts.Groups[2].Value.Trim();
            string contentType = null;
            Dictionary<string, string> headerDic = null;
            if (!string.IsNullOrEmpty(headerContent))
            {
                var headers = HeaderParser.Matches(fileParts.Groups[2].Value.Trim());
                if (headers.Count == 0) throw new ArgumentException($"Header part of content could not be parsed");
                headerDic = headers.ToDictionary(c => c.Groups[1].Value, c => c.Groups[2].Value.Trim());
                headerDic.TryGetValue("Content-Type", out contentType);
            }
            var format = Helper.ParseContentType(contentType);

            response.Content = new StringContent(fileParts.Groups[4].Value.Trim(), format.encoding, format.mediaType);

            if (headerDic != null)
                foreach (var header in headerDic)
                {
                    if (!response.Headers.TryAddWithoutValidation(header.Key, header.Value))
                        if (!response.Content.Headers.TryAddWithoutValidation(header.Key, header.Value))
                            throw new ApplicationException($"Could not add header '{header.Key}'");
                }

            return response;
        }

        /// <summary>
        /// Read from a file containing the body of the response
        /// </summary>
        /// <param name="fileFullPath"></param>
        /// <param name="statusCode"></param>
        /// <returns></returns>
        public static HttpResponseMessage FromBodyOnlyFile(string fileFullPath, HttpStatusCode statusCode)
        {
            string content = ReadFile(fileFullPath);

            var response = new HttpResponseMessage(statusCode);

            response.Content = new StringContent(content);

            return response;
        }

        /// <summary>
        /// Read from a string containing the body of the response
        /// </summary>
        /// <param name="content">body of the response</param>
        /// <param name="statusCode"></param>
        /// <returns></returns>
        public static HttpResponseMessage From(string content, HttpStatusCode statusCode)
        {
            var response = new HttpResponseMessage(statusCode);

            response.Content = new StringContent(content);

            return response;
        }

        private static string ReadFile(string fileFullPath)
        {
            if (!File.Exists(fileFullPath)) throw new ArgumentException($"Could not find file '{fileFullPath}'");

            string content = File.ReadAllText(fileFullPath);

            if (string.IsNullOrEmpty(content)) throw new ArgumentException($"File content is empty");

            return content;
        }
    }
}
