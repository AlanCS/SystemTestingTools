using System;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using SystemTestingTools.Internal;

namespace SystemTestingTools
{
    /// <summary>
    /// Contains methods to create easily create HttpResponseMessage
    /// </summary>
    public static class ResponseFactory
    {
        // part 1 = first line starting with HTTP/, ie HTTP/1.1 424 Failed Dependency
        // part 2 = headers (if any)
        // part 3 = double new lines
        // part 4 = body
        private static Regex FiddlerFilePartsRegex = new Regex(@"HTTP/[^\n]+?([0-9]{3}).+?\n(.*?)(\r\r|\n\n|\r\n\r\n)(.*)", RegexOptions.Compiled | RegexOptions.Singleline);

        private static Regex DividerRegex = new Regex(@"(.+?)\n--\!\?@Divider\:.+?\n(.+)", RegexOptions.Compiled | RegexOptions.Singleline);        

        /// <summary>
        /// Reads the response of a file recorded by SystemTestingTools
        /// </summary>
        /// <param name="fileFullPath"></param>
        /// <returns></returns>
        public static StubHttpResponseMessage FromRecordedFile(FileFullPath fileFullPath)
        {
            string content = fileFullPath.ReadContent();
            var divider = DividerRegex.Match(content);

            if (!content.StartsWith("SystemTestingTools_Recording", StringComparison.InvariantCultureIgnoreCase))
            {
                if(divider.Success) // old types of recordings are not supported anymore, we needed to make it standardized to only new formats
                    throw new ArgumentException($"File is an old recording, please use ReadFiddlerResponseFormat() or regenerate it");

                throw new ArgumentException($"File is not in the right format, please consult {Constants.Website} or try using ReadFiddlerResponseFormat()");
            }
            
            if(!divider.Success)
                throw new ArgumentException("Could not find divider in file");

            content = DividerRegex.Match(content).Groups[2].Value;

            var response = ReadFiddlerResponseFormat(content);
            response.SetFile(fileFullPath);
            return response;
        }

        internal static StubHttpResponseMessage ReadFiddlerResponseFormat(string content)
        {
            var fileParts = FiddlerFilePartsRegex.Match(content);

            if (!fileParts.Success)
                throw new ArgumentException($"File is not in the right format, please consult {Constants.Website}");

            var httpStatusCode = Convert.ToInt32(fileParts.Groups[1].Value);

            if (!Enum.IsDefined(typeof(HttpStatusCode), httpStatusCode))
                throw new ArgumentException($"Not a valid Http Status code: {httpStatusCode}");

            var httpStatus = (HttpStatusCode)httpStatusCode;
            var response = new StubHttpResponseMessage(httpStatus);

            response.Content = Helper.ParseHeadersAndBody(fileParts.Groups[2].Value.Trim(), fileParts.Groups[4].Value.Trim(), response.Headers);

            return response;
        }

        /// <summary>
        /// Read a file with the format like
        /// HTTP/1.1 200 OK
        /// Header1: some value
        /// Header2: some other value
        /// 
        /// {"Message":"some json content"}
        /// 
        /// Or the format generated by the recorder function v1
        /// </summary>
        /// <param name="fileFullPath"></param>
        /// <returns></returns>
        public static StubHttpResponseMessage FromFiddlerLikeResponseFile(FileFullPath fileFullPath)
        {
            string content = fileFullPath.ReadContent();

            if(content.StartsWith("SystemTestingTools_Recording", StringComparison.InvariantCultureIgnoreCase))
                throw new ArgumentException($"For this format, use FromRecordedFile()");

            if (DividerRegex.IsMatch(content))
                content = DividerRegex.Match(content).Groups[2].Value;

            var response = ReadFiddlerResponseFormat(content);
            response.SetFile(fileFullPath);
            return response;
        }



        /// <summary>
        /// Read from a file containing the body of the response
        /// </summary>
        /// <param name="fileFullPath"></param>
        /// <param name="statusCode"></param>
        /// <returns></returns>
        public static StubHttpResponseMessage FromBodyOnlyFile(FileFullPath fileFullPath, HttpStatusCode statusCode)
        {
            string content = fileFullPath.ReadContent();

            var response = new StubHttpResponseMessage(statusCode);

            response.Content = new StringContent(content, System.Text.Encoding.Default, fileFullPath.GetExtension().GetContentType());

            response.SetFile(fileFullPath);

            return response;
        }        

        /// <summary>
        /// Read from a string containing the body of the response
        /// </summary>
        /// <param name="content">body of the response</param>
        /// <param name="statusCode"></param>
        /// <returns></returns>
        public static StubHttpResponseMessage From(string content, HttpStatusCode statusCode)
        {
            var response = new StubHttpResponseMessage(statusCode);

            response.Content = new StringContent(content);

            response.File = "Raw content";

            return response;
        }
    }
}
