<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SystemTestingTools</name>
    </assembly>
    <members>
        <member name="T:SystemTestingTools.HttpCallsInterceptorHandler">
            <summary>
            The handler that will allow SystemTestingTools to intercept OUTGOING http calls and return mocks
            </summary>
        </member>
        <member name="M:SystemTestingTools.HttpCallsInterceptorHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            intercepts the http request that was about to hit a downstream server and return a mock instead
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SystemTestingTools.HttpClientExtensions.AppendMockHttpCall(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.Uri,System.Net.Http.HttpResponseMessage)">
            <summary>
            Will return the response when a matching call gets fired, but only once
            if you expect this endpoint to be called X times, add X mock endpoints
            </summary>
            <param name="httpClient"></param>
            <param name="httpMethod"></param>
            <param name="Url"></param>
            <param name="response">You can create your response, or use ResponseFactory to create one for you</param>
        </member>
        <member name="M:SystemTestingTools.HttpClientExtensions.AppendMockHttpCall(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.Uri,System.Exception)">
            <summary>
            Will throw an exception when a matching call gets fired, but only once
            if you expect this endpoint to be called X times, add X mock endpoints
            </summary>
            <param name="httpClient"></param>
            <param name="httpMethod"></param>
            <param name="Url"></param>
            <param name="exception">The exception that will be throw when HttpClient.SendAsync gets called</param>
        </member>
        <member name="F:SystemTestingTools.MockInstrumentation.UnsessionedLogs">
            <summary>
            Get the logs not linked to any user session
            </summary>
        </member>
        <member name="T:SystemTestingTools.RequestResponseRecorder">
            <summary>
            Use this handle to record responses you get, so you can use it for mocking later
            </summary>
        </member>
        <member name="M:SystemTestingTools.RequestResponseRecorder.#ctor(System.String,System.String)">
            <summary>
            Hander to save request and responses information
            </summary>
            <param name="Folder">Folder full path where the response text files will be saved</param>
            <param name="CallerPath">Please don't pass this parameter, it will be used by .net to track the file that called this method</param>
        </member>
        <member name="T:SystemTestingTools.WebHostBuilderExtensions">
            <summary>
            Extends WebHostBuilder to allow interception of Http calls and logs
            </summary>
        </member>
        <member name="M:SystemTestingTools.WebHostBuilderExtensions.ConfigureInterceptionOfHttpCalls(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            Intercept outgoing Http calls so we can return mocks and make assertions later
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:SystemTestingTools.WebHostBuilderExtensions.IntercepNLog(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)">
            <summary>
            Intercept NLog logs so we can assert those later
            </summary>
            <param name="builder"></param>
            <param name="nlogFile"></param>
            <returns></returns>
        </member>
    </members>
</doc>
