<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SystemTestingTools</name>
    </assembly>
    <members>
        <member name="T:SystemTestingTools.HttpCallsInterceptorHandler">
            <summary>
            The handler that will allow SystemTestingTools to intercept OUTGOING http calls and return mocks
            </summary>
        </member>
        <member name="M:SystemTestingTools.HttpCallsInterceptorHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            intercepts the http request that was about to hit a downstream server and return a mock instead
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SystemTestingTools.HttpClientExtensions">
            <summary>
            extensions to HttpClient to allow mocking and assertions
            </summary>
        </member>
        <member name="M:SystemTestingTools.HttpClientExtensions.CreateSession(System.Net.Http.HttpClient)">
            <summary>
            Create a new session, so logs and requests and responses can be tracked
            </summary>
            <param name="httpClient"></param>
            <returns>the SessionId, can be used to interact with other tools that might need a session</returns>
        </member>
        <member name="M:SystemTestingTools.HttpClientExtensions.AppendMockHttpCall(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.Uri,System.Net.Http.HttpResponseMessage)">
            <summary>
            Will return the response when a matching call gets fired, but only once
            if you expect this endpoint to be called X times, add X mock endpoints
            </summary>
            <param name="httpClient"></param>
            <param name="httpMethod"></param>
            <param name="Url"></param>
            <param name="response">You can create your response, or use ResponseFactory to create one for you</param>
        </member>
        <member name="M:SystemTestingTools.HttpClientExtensions.AppendMockHttpCall(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.Uri,System.Exception)">
            <summary>
            Will throw an exception when a matching call gets fired, but only once
            if you expect this endpoint to be called X times, add X mock endpoints
            </summary>
            <param name="httpClient"></param>
            <param name="httpMethod"></param>
            <param name="Url"></param>
            <param name="exception">The exception that will be throw when HttpClient.SendAsync gets called</param>
        </member>
        <member name="M:SystemTestingTools.HttpClientExtensions.GetSessionLogs(System.Net.Http.HttpClient)">
            <summary>
            Get all logs related to the current session
            </summary>
            <param name="httpClient"></param>
            <returns></returns>
        </member>
        <member name="M:SystemTestingTools.HttpClientExtensions.GetSessionOutgoingRequests(System.Net.Http.HttpClient)">
            <summary>
            Get all outgoing Http requests related to the current session
            </summary>
            <param name="httpClient"></param>
            <returns></returns>
        </member>
        <member name="T:SystemTestingTools.HttpRequestMessageWrapper">
            <summary>
            Wraps requests
            </summary>
        </member>
        <member name="P:SystemTestingTools.HttpRequestMessageWrapper.Request">
            <summary>
            The outgoing http request
            </summary>
        </member>
        <member name="P:SystemTestingTools.HttpRequestMessageWrapper.RequestTime">
            <summary>
            When the Http request happened
            </summary>
        </member>
        <member name="M:SystemTestingTools.FileWriter.Write(SystemTestingTools.RequestResponse)">
            <summary>
            
            </summary>
            <param name="log"></param>
            <returns>created file name</returns>
        </member>
        <member name="M:SystemTestingTools.StringFormattingHelper.FormatJson(System.String)">
            <summary>
            copied from https://stackoverflow.com/questions/4580397/json-formatter-in-c
            </summary>
        </member>
        <member name="T:SystemTestingTools.NonFunctionalLogger">
            <summary>
            class used to assign as a mandatory logger but does not log anything, because the namespace is not one we are interested in
            </summary>
        </member>
        <member name="T:SystemTestingTools.LoggedEvent">
            <summary>
            Each logged event in your application
            </summary>
        </member>
        <member name="P:SystemTestingTools.LoggedEvent.LogLevel">
            <summary>
            The level of the log raised
            </summary>
        </member>
        <member name="P:SystemTestingTools.LoggedEvent.Message">
            <summary>
            The log message (ie: "Could not contact downstream service x")
            </summary>
        </member>
        <member name="P:SystemTestingTools.LoggedEvent.Source">
            <summary>
            The class (with namespace) that logged it
            </summary>
        </member>
        <member name="T:SystemTestingTools.MockInstrumentation">
            <summary>
            Contains a mock of usual instrumentation, containing logs and requests
            </summary>
        </member>
        <member name="F:SystemTestingTools.MockInstrumentation.UnsessionedLogs">
            <summary>
            Get the logs not linked to any user session
            </summary>
        </member>
        <member name="T:SystemTestingTools.ResponseFactory">
            <summary>
            Contains methods to create easily create HttpResponseMessage
            </summary>
        </member>
        <member name="M:SystemTestingTools.ResponseFactory.FromFiddlerLikeResponseFile(System.String)">
            <summary>
            Read a file with the format like
            HTTP/1.1 200 OK
            Header1: some value
            Header2: some other value
            
            {"Message":"some json content"}
            
            Or the format generated by the recorder function
            </summary>
            <param name="fileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:SystemTestingTools.ResponseFactory.FromBodyOnlyFile(System.String,System.Net.HttpStatusCode)">
            <summary>
            Read from a file containing the body of the response
            </summary>
            <param name="fileFullPath"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:SystemTestingTools.ResponseFactory.From(System.String,System.Net.HttpStatusCode)">
            <summary>
            Read from a string containing the body of the response
            </summary>
            <param name="content">body of the response</param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:SystemTestingTools.RequestResponseRecorder">
            <summary>
            Use this handle to record responses you get, so you can use it for mocking later
            </summary>
        </member>
        <member name="M:SystemTestingTools.RequestResponseRecorder.#ctor(System.String,System.String)">
            <summary>
            Hander to save request and responses information
            </summary>
            <param name="Folder">Folder full path where the response text files will be saved</param>
            <param name="CallerPath">Please don't pass this parameter, it will be used by .net to track the file that called this method</param>
        </member>
        <member name="M:SystemTestingTools.RequestResponseRecorder.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Lets outgoing requests pass through, to log requests and responses
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SystemTestingTools.WebHostBuilderExtensions">
            <summary>
            Extends WebHostBuilder to allow interception of Http calls and logs
            </summary>
        </member>
        <member name="M:SystemTestingTools.WebHostBuilderExtensions.ConfigureInterceptionOfHttpCalls(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            Intercept outgoing Http calls so we can return mocks and make assertions later
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:SystemTestingTools.WebHostBuilderExtensions.IntercepLogs(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.Extensions.Logging.LogLevel,System.String[],System.String[])">
            <summary>
            Intercept NLog logs so we can assert those later
            </summary>
            <param name="builder"></param>
            <param name="minimumLevelToIntercept"></param>
            <param name="namespaceToIncludeStart">Beginning of namespaces sources of logs allow; if null, all  to sources will be included. Example: MyNamespaceName</param>
            <param name="namespaceToExcludeStart">Beginning of namespaces sources of logs disallow; if null, no exclusion will apply. Exclusions are applied AFTER inclusion filter. Example: Microsoft</param>
            <returns></returns>
        </member>
    </members>
</doc>
